Dakota version 6.7 released Nov 15 2017.
Repository revision 0616ac7 (2017-11-10) built Nov 13 2017 03:30:07.
Running MPI Dakota executable in serial mode.
Start time: Fri Apr  6 11:43:14 2018

-----------------------
Begin DAKOTA input file
dakota_cal.in
-----------------------

method
  nl2sol

variables
  continuous_design 2
    descriptors  'E0'      'Es'
    lower_bounds 28e6  -10000.0
    upper_bounds 32e6       0.0

  continuous_state 1
    descriptors     'Y'
    initial_state 400.0

responses
  descriptors 'displacement01'
              'displacement02
              'displacement03
              'displacement04
              'displacement05
              'displacement06
              'displacement07
              'displacement08
              'displacement09
              'displacement10
              'displacement11
              'displacement12
              'displacement13
              'displacement14
              'displacement15
              'displacement16
              'displacement17
              'displacement18
              'displacement19
              'displacement20

  calibration_terms 20
    calibration_data_file = 'displacements.dat'
      num_experiments 2
      experiment_variance_type 'scalar'
    numerical_gradients
    no_hessians
    
interface
  fork
    analysis_driver 'python cantilever.py'
    parameters_file 'params.in'
    results_file 'results.out'
    file_save file_tag
    analysis_components '20'
---------------------
End DAKOTA input file
---------------------

Using Dakota input file 'dakota_cal.in'
Writing new restart file 'dakota.rst'.

Reading scalar experimental data from file displacements.dat:
  2 experiment(s) for
  20 scalar responses

>>>>> Executing environment.

>>>>> Running nl2sol iterator.

NONDEFAULT VALUES...

RFCTOL.... V(32) = 0.0001000000
XCTOL..... V(33) = 1.000000e-05
XFTOL..... V(34) = 1.000000e-08

---------------------
Begin Evaluation    1
---------------------
Parameters for evaluation 1:
                      2.8000000000e+07 E0
                      0.0000000000e+00 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.1 results.out.1

Active response data for evaluation 1:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.7724867725e+00 displacement01
                      6.7724867725e+00 displacement02
                      6.7724867725e+00 displacement03
                      6.7724867725e+00 displacement04
                      6.7724867725e+00 displacement05
                      6.7724867725e+00 displacement06
                      6.7724867725e+00 displacement07
                      6.7724867725e+00 displacement08
                      6.7724867725e+00 displacement09
                      6.7724867725e+00 displacement10
                      6.7724867725e+00 displacement11
                      6.7724867725e+00 displacement12
                      6.7724867725e+00 displacement13
                      6.7724867725e+00 displacement14
                      6.7724867725e+00 displacement15
                      6.7724867725e+00 displacement16
                      6.7724867725e+00 displacement17
                      6.7724867725e+00 displacement18
                      6.7724867725e+00 displacement19
                      6.7724867725e+00 displacement20



------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation    2
---------------------
Parameters for evaluation 2:
                      2.8028000000e+07 E0
                      0.0000000000e+00 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.2 results.out.2

Active response data for evaluation 2:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.7657210514e+00 displacement01
                      6.7657210514e+00 displacement02
                      6.7657210514e+00 displacement03
                      6.7657210514e+00 displacement04
                      6.7657210514e+00 displacement05
                      6.7657210514e+00 displacement06
                      6.7657210514e+00 displacement07
                      6.7657210514e+00 displacement08
                      6.7657210514e+00 displacement09
                      6.7657210514e+00 displacement10
                      6.7657210514e+00 displacement11
                      6.7657210514e+00 displacement12
                      6.7657210514e+00 displacement13
                      6.7657210514e+00 displacement14
                      6.7657210514e+00 displacement15
                      6.7657210514e+00 displacement16
                      6.7657210514e+00 displacement17
                      6.7657210514e+00 displacement18
                      6.7657210514e+00 displacement19
                      6.7657210514e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation    3
---------------------
Parameters for evaluation 3:
                      2.8000000000e+07 E0
                     -1.0000000000e-05 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.3 results.out.3

Active response data for evaluation 3:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.7724867724e+00 displacement01
                      6.7724867725e+00 displacement02
                      6.7724867726e+00 displacement03
                      6.7724867726e+00 displacement04
                      6.7724867727e+00 displacement05
                      6.7724867728e+00 displacement06
                      6.7724867728e+00 displacement07
                      6.7724867729e+00 displacement08
                      6.7724867730e+00 displacement09
                      6.7724867730e+00 displacement10
                      6.7724867731e+00 displacement11
                      6.7724867732e+00 displacement12
                      6.7724867732e+00 displacement13
                      6.7724867733e+00 displacement14
                      6.7724867734e+00 displacement15
                      6.7724867734e+00 displacement16
                      6.7724867735e+00 displacement17
                      6.7724867736e+00 displacement18
                      6.7724867736e+00 displacement19
                      6.7724867737e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.4163289469e-07  4.8374637629e-06 ] displacement01 gradient
 [ -2.4163289469e-07 -1.7821299991e-06 ] displacement02 gradient
 [ -2.4163289469e-07 -8.4019013968e-06 ] displacement03 gradient
 [ -2.4163289469e-07 -1.5021672795e-05 ] displacement04 gradient
 [ -2.4163289469e-07 -2.1641355374e-05 ] displacement05 gradient
 [ -2.4163289469e-07 -2.8261215590e-05 ] displacement06 gradient
 [ -2.4163289469e-07 -3.4880809352e-05 ] displacement07 gradient
 [ -2.4163289469e-07 -4.1500491932e-05 ] displacement08 gradient
 [ -2.4163289469e-07 -4.8120174512e-05 ] displacement09 gradient
 [ -2.4163289469e-07 -5.4739945909e-05 ] displacement10 gradient
 [ -2.4163289469e-07 -6.1359539671e-05 ] displacement11 gradient
 [ -2.4163289469e-07 -6.7979399887e-05 ] displacement12 gradient
 [ -2.4163289469e-07 -7.4599082467e-05 ] displacement13 gradient
 [ -2.4163289469e-07 -8.1218853865e-05 ] displacement14 gradient
 [ -2.4163289469e-07 -8.7838625262e-05 ] displacement15 gradient
 [ -2.4163289469e-07 -9.4458219024e-05 ] displacement16 gradient
 [ -2.4163289469e-07 -1.0107799042e-04 ] displacement17 gradient
 [ -2.4163289469e-07 -1.0769776182e-04 ] displacement18 gradient
 [ -2.4163289469e-07 -1.1431744440e-04 ] displacement19 gradient
 [ -2.4163289469e-07 -1.2093730462e-04 ] displacement20 gradient



    I     INITIAL X(I)       D(I)

    1     2.80000e+07        2.42e-06
    2     0.00000            0.00121

   IT   NF     F       RELDF    PRELDF   RELDX   MODEL  STPPAR  D*STEP  NPRELDF

    0    1  94.9    

---------------------
Begin Evaluation    4
---------------------
Parameters for evaluation 4:
                      2.8335327935e+07 E0
                     -3.4718667019e+02 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.4 results.out.4

Active response data for evaluation 4:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.6906997381e+00 displacement01
                      6.6929435957e+00 displacement02
                      6.6951889589e+00 displacement03
                      6.6974358291e+00 displacement04
                      6.6996842079e+00 displacement05
                      6.7019340968e+00 displacement06
                      6.7041854973e+00 displacement07
                      6.7064384110e+00 displacement08
                      6.7086928393e+00 displacement09
                      6.7109487839e+00 displacement10
                      6.7132062462e+00 displacement11
                      6.7154652277e+00 displacement12
                      6.7177257301e+00 displacement13
                      6.7199877547e+00 displacement14
                      6.7222513033e+00 displacement15
                      6.7245163773e+00 displacement16
                      6.7267829782e+00 displacement17
                      6.7290511076e+00 displacement18
                      6.7313207671e+00 displacement19
                      6.7335919581e+00 displacement20



---------------------
Begin Evaluation    5
---------------------
Parameters for evaluation 5:
                      2.8427853291e+07 E0
                     -5.6701633191e+02 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.5 results.out.5

Active response data for evaluation 5:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.6678975564e+00 displacement01
                      6.6715379974e+00 displacement02
                      6.6751824157e+00 displacement03
                      6.6788308178e+00 displacement04
                      6.6824832102e+00 displacement05
                      6.6861395995e+00 displacement06
                      6.6897999923e+00 displacement07
                      6.6934643951e+00 displacement08
                      6.6971328145e+00 displacement09
                      6.7008052571e+00 displacement10
                      6.7044817296e+00 displacement11
                      6.7081622386e+00 displacement12
                      6.7118467908e+00 displacement13
                      6.7155353927e+00 displacement14
                      6.7192280511e+00 displacement15
                      6.7229247728e+00 displacement16
                      6.7266255643e+00 displacement17
                      6.7303304324e+00 displacement18
                      6.7340393839e+00 displacement19
                      6.7377524255e+00 displacement20



------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation    6
---------------------
Parameters for evaluation 6:
                      2.8456281144e+07 E0
                     -5.6701633191e+02 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.6 results.out.6

Active response data for evaluation 6:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.6612389737e+00 displacement01
                      6.6648721456e+00 displacement02
                      6.6685092829e+00 displacement03
                      6.6721503921e+00 displacement04
                      6.6757954796e+00 displacement05
                      6.6794445521e+00 displacement06
                      6.6830976160e+00 displacement07
                      6.6867546779e+00 displacement08
                      6.6904157443e+00 displacement09
                      6.6940808219e+00 displacement10
                      6.6977499172e+00 displacement11
                      6.7014230368e+00 displacement12
                      6.7051001875e+00 displacement13
                      6.7087813757e+00 displacement14
                      6.7124666082e+00 displacement15
                      6.7161558916e+00 displacement16
                      6.7198492326e+00 displacement17
                      6.7235466380e+00 displacement18
                      6.7272481144e+00 displacement19
                      6.7309536685e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation    7
---------------------
Parameters for evaluation 7:
                      2.8427853291e+07 E0
                     -5.6758334824e+02 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.7 results.out.7

Active response data for evaluation 7:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.6678948976e+00 displacement01
                      6.6715389781e+00 displacement02
                      6.6751870439e+00 displacement03
                      6.6788391014e+00 displacement04
                      6.6824951573e+00 displacement05
                      6.6861552181e+00 displacement06
                      6.6898192904e+00 displacement07
                      6.6934873807e+00 displacement08
                      6.6971594958e+00 displacement09
                      6.7008356422e+00 displacement10
                      6.7045158266e+00 displacement11
                      6.7082000556e+00 displacement12
                      6.7118883359e+00 displacement13
                      6.7155806742e+00 displacement14
                      6.7192770772e+00 displacement15
                      6.7229775516e+00 displacement16
                      6.7266821041e+00 displacement17
                      6.7303907415e+00 displacement18
                      6.7341034705e+00 displacement19
                      6.7378202980e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.3422742091e-07  4.6892292299e-06 ] displacement01 gradient
 [ -2.3448312299e-07 -1.7294986557e-06 ] displacement02 gradient
 [ -2.3473924403e-07 -8.1622654683e-06 ] displacement03 gradient
 [ -2.3499578492e-07 -1.4609105760e-05 ] displacement04 gradient
 [ -2.3525274660e-07 -2.1070054193e-05 ] displacement05 gradient
 [ -2.3551012998e-07 -2.7545145523e-05 ] displacement06 gradient
 [ -2.3576793599e-07 -3.4034414614e-05 ] displacement07 gradient
 [ -2.3602616554e-07 -4.0537896434e-05 ] displacement08 gradient
 [ -2.3628481958e-07 -4.7055626046e-05 ] displacement09 gradient
 [ -2.3654389902e-07 -5.3587638613e-05 ] displacement10 gradient
 [ -2.3680340481e-07 -6.0133969418e-05 ] displacement11 gradient
 [ -2.3706333788e-07 -6.6694653828e-05 ] displacement12 gradient
 [ -2.3732369916e-07 -7.3269727327e-05 ] displacement13 gradient
 [ -2.3758448961e-07 -7.9859225487e-05 ] displacement14 gradient
 [ -2.3784571016e-07 -8.6463184010e-05 ] displacement15 gradient
 [ -2.3810736175e-07 -9.3081638674e-05 ] displacement16 gradient
 [ -2.3836944535e-07 -9.9714625385e-05 ] displacement17 gradient
 [ -2.3863196189e-07 -1.0636218014e-04 ] displacement18 gradient
 [ -2.3889491234e-07 -1.1302433905e-04 ] displacement19 gradient
 [ -2.3915829765e-07 -1.1970113832e-04 ] displacement20 gradient


    1    3  66.8       0.30     0.30     0.008     G    1.e+01  1.      0.79   

---------------------
Begin Evaluation    8
---------------------
Parameters for evaluation 8:
                      2.9031056752e+07 E0
                     -2.4990600767e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.8 results.out.8

Active response data for evaluation 8:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.5207311352e+00 displacement01
                      6.5361033146e+00 displacement02
                      6.5515481430e+00 displacement03
                      6.5670661367e+00 displacement04
                      6.5826578167e+00 displacement05
                      6.5983237091e+00 displacement06
                      6.6140643451e+00 displacement07
                      6.6298802608e+00 displacement08
                      6.6457719977e+00 displacement09
                      6.6617401021e+00 displacement10
                      6.6777851260e+00 displacement11
                      6.6939076265e+00 displacement12
                      6.7101081660e+00 displacement13
                      6.7263873126e+00 displacement14
                      6.7427456398e+00 displacement15
                      6.7591837267e+00 displacement16
                      6.7757021580e+00 displacement17
                      6.7923015242e+00 displacement18
                      6.8089824216e+00 displacement19
                      6.8257454525e+00 displacement20



---------------------
Begin Evaluation    9
---------------------
Parameters for evaluation 9:
                      2.9754146166e+07 E0
                     -5.2161151199e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.9 results.out.9

Active response data for evaluation 9:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3509496420e+00 displacement01
                      6.3814601504e+00 displacement02
                      6.4122652242e+00 displacement03
                      6.4433691498e+00 displacement04
                      6.4747762973e+00 displacement05
                      6.5064911226e+00 displacement06
                      6.5385181691e+00 displacement07
                      6.5708620701e+00 displacement08
                      6.6035275512e+00 displacement09
                      6.6365194323e+00 displacement10
                      6.6698426301e+00 displacement11
                      6.7035021607e+00 displacement12
                      6.7375031417e+00 displacement13
                      6.7718507953e+00 displacement14
                      6.8065504508e+00 displacement15
                      6.8416075469e+00 displacement16
                      6.8770276354e+00 displacement17
                      6.9128163833e+00 displacement18
                      6.9489795764e+00 displacement19
                      6.9855231221e+00 displacement20



------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation   10
---------------------
Parameters for evaluation 10:
                      2.9783900312e+07 E0
                     -5.2161151199e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.10 results.out.10

Active response data for evaluation 10:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3446271823e+00 displacement01
                      6.3750768280e+00 displacement02
                      6.4058201560e+00 displacement03
                      6.4368614356e+00 displacement04
                      6.4682050193e+00 displacement05
                      6.4998553449e+00 displacement06
                      6.5318169374e+00 displacement07
                      6.5640944112e+00 displacement08
                      6.5966924724e+00 displacement09
                      6.6296159211e+00 displacement10
                      6.6628696536e+00 displacement11
                      6.6964586652e+00 displacement12
                      6.7303880520e+00 displacement13
                      6.7646630142e+00 displacement14
                      6.7992888586e+00 displacement15
                      6.8342710008e+00 displacement16
                      6.8696149689e+00 displacement17
                      6.9053264055e+00 displacement18
                      6.9414110715e+00 displacement19
                      6.9778748487e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation   11
---------------------
Parameters for evaluation 11:
                      2.9754146166e+07 E0
                     -5.2213312350e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.11 results.out.11

Active response data for evaluation 11:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3509274526e+00 displacement01
                      6.3814684043e+00 displacement02
                      6.4123045119e+00 displacement03
                      6.4434400749e+00 displacement04
                      6.4748794767e+00 displacement05
                      6.5066271866e+00 displacement06
                      6.5386877621e+00 displacement07
                      6.5710658509e+00 displacement08
                      6.6037661932e+00 displacement09
                      6.6367936241e+00 displacement10
                      6.6701530759e+00 displacement11
                      6.7038495805e+00 displacement12
                      6.7378882721e+00 displacement13
                      6.7722743895e+00 displacement14
                      6.8070132793e+00 displacement15
                      6.8421103981e+00 displacement16
                      6.8775713159e+00 displacement17
                      6.9134017184e+00 displacement18
                      6.9496074106e+00 displacement19
                      6.9861943200e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.1249004078e-07  4.2540209052e-06 ] displacement01 gradient
 [ -2.1453555973e-07 -1.5823732147e-06 ] displacement02 gradient
 [ -2.1661075803e-07 -7.5319903229e-06 ] displacement03 gradient
 [ -2.1871621263e-07 -1.3597310558e-05 ] displacement04 gradient
 [ -2.2085251460e-07 -1.9780878741e-05 ] displacement05 gradient
 [ -2.2302026947e-07 -2.6085306363e-05 ] displacement06 gradient
 [ -2.2522009776e-07 -3.2513273641e-05 ] displacement07 gradient
 [ -2.2745263531e-07 -3.9067531651e-05 ] displacement08 gradient
 [ -2.2971853383e-07 -4.5750904533e-05 ] displacement09 gradient
 [ -2.3201846133e-07 -5.2566291778e-05 ] displacement10 gradient
 [ -2.3435310263e-07 -5.9516670596e-05 ] displacement11 gradient
 [ -2.3672315987e-07 -6.6605098375e-05 ] displacement12 gradient
 [ -2.3912935301e-07 -7.3834715224e-05 ] displacement13 gradient
 [ -2.4157242042e-07 -8.1208746614e-05 ] displacement14 gradient
 [ -2.4405311942e-07 -8.8730506111e-05 ] displacement15 gradient
 [ -2.4657222686e-07 -9.6403398221e-05 ] displacement16 gradient
 [ -2.4913053977e-07 -1.0423092133e-04 ] displacement17 gradient
 [ -2.5172887592e-07 -1.1221667076e-04 ] displacement18 gradient
 [ -2.5436807455e-07 -1.2036434193e-04 ] displacement19 gradient
 [ -2.5704899700e-07 -1.2867773368e-04 ] displacement20 gradient


    2    5  19.8       0.70     0.70     0.04      G    0.      6.      0.70   

---------------------
Begin Evaluation   12
---------------------
Parameters for evaluation 12:
                      2.9792081896e+07 E0
                     -5.2919261044e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.12 results.out.12

Active response data for evaluation 12:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3425692149e+00 displacement01
                      6.3734434830e+00 displacement02
                      6.4046198001e+00 displacement03
                      6.4361026204e+00 displacement04
                      6.4678964863e+00 displacement05
                      6.5000060302e+00 displacement06
                      6.5324359772e+00 displacement07
                      6.5651911469e+00 displacement08
                      6.5982764563e+00 displacement09
                      6.6316969218e+00 displacement10
                      6.6654576621e+00 displacement11
                      6.6995639006e+00 displacement12
                      6.7340209682e+00 displacement13
                      6.7688343061e+00 displacement14
                      6.8040094683e+00 displacement15
                      6.8395521253e+00 displacement16
                      6.8754680663e+00 displacement17
                      6.9117632031e+00 displacement18
                      6.9484435727e+00 displacement19
                      6.9855153410e+00 displacement20



------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation   13
---------------------
Parameters for evaluation 13:
                      2.9821873977e+07 E0
                     -5.2919261044e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.13 results.out.13

Active response data for evaluation 13:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3362553898e+00 displacement01
                      6.3670680705e+00 displacement02
                      6.3981818946e+00 displacement03
                      6.4296012986e+00 displacement04
                      6.4613308065e+00 displacement05
                      6.4933750321e+00 displacement06
                      6.5257386811e+00 displacement07
                      6.5584265536e+00 displacement08
                      6.5914435463e+00 displacement09
                      6.6247946549e+00 displacement10
                      6.6584849770e+00 displacement11
                      6.6925197141e+00 displacement12
                      6.7269041748e+00 displacement13
                      6.7616437773e+00 displacement14
                      6.7967440524e+00 displacement15
                      6.8322106462e+00 displacement16
                      6.8680493233e+00 displacement17
                      6.9042659699e+00 displacement18
                      6.9408665971e+00 displacement19
                      6.9778573440e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation   14
---------------------
Parameters for evaluation 14:
                      2.9792081896e+07 E0
                     -5.2972180305e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.14 results.out.14

Active response data for evaluation 14:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3425467623e+00 displacement01
                      6.3734518358e+00 displacement02
                      6.4046595638e+00 displacement03
                      6.4361744141e+00 displacement04
                      6.4680009429e+00 displacement05
                      6.5001437967e+00 displacement06
                      6.5326077151e+00 displacement07
                      6.5653975328e+00 displacement08
                      6.5985181819e+00 displacement09
                      6.6319746947e+00 displacement10
                      6.6657722061e+00 displacement11
                      6.6999159561e+00 displacement12
                      6.7344112926e+00 displacement13
                      6.7692636744e+00 displacement14
                      6.8044786735e+00 displacement15
                      6.8400619790e+00 displacement16
                      6.8760193991e+00 displacement17
                      6.9123568652e+00 displacement18
                      6.9490804344e+00 displacement19
                      6.9861962935e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.1192963595e-07  4.2428012877e-06 ] displacement01 gradient
 [ -2.1399687685e-07 -1.5784000472e-06 ] displacement02 gradient
 [ -2.1609451290e-07 -7.5140406712e-06 ] displacement03 gradient
 [ -2.1822314291e-07 -1.3566661033e-05 ] displacement04 gradient
 [ -2.2038338050e-07 -1.9738868732e-05 ] displacement05 gradient
 [ -2.2257585456e-07 -2.6033340606e-05 ] displacement06 gradient
 [ -2.2480120971e-07 -3.2452824900e-05 ] displacement07 gradient
 [ -2.2706010675e-07 -3.9000143508e-05 ] displacement08 gradient
 [ -2.2935322317e-07 -4.5678194302e-05 ] displacement09 gradient
 [ -2.3168125364e-07 -5.2489953538e-05 ] displacement10 gradient
 [ -2.3404491057e-07 -5.9438478355e-05 ] displacement11 gradient
 [ -2.3644492460e-07 -6.6526909372e-05 ] displacement12 gradient
 [ -2.3888204524e-07 -7.3758473371e-05 ] displacement13 gradient
 [ -2.4135704138e-07 -8.1136486084e-05 ] displacement14 gradient
 [ -2.4387070194e-07 -8.8664355089e-05 ] displacement15 gradient
 [ -2.4642383649e-07 -9.6345582809e-05 ] displacement16 gradient
 [ -2.4901727590e-07 -1.0418376963e-04 ] displacement17 gradient
 [ -2.5165187301e-07 -1.1218261712e-04 ] displacement18 gradient
 [ -2.5432850335e-07 -1.2034593142e-04 ] displacement19 gradient
 [ -2.5704806585e-07 -1.2867762670e-04 ] displacement20 gradient


    3    6  19.8       0.0019   0.0019   0.0006    G    0.      0.1     0.0019 

---------------------
Begin Evaluation   15
---------------------
Parameters for evaluation 15:
                      2.9792117040e+07 E0
                     -5.2921595180e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.15 results.out.15

Active response data for evaluation 15:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3425607690e+00 displacement01
                      6.3734363231e+00 displacement02
                      6.4046139518e+00 displacement03
                      6.4360981099e+00 displacement04
                      6.4678933404e+00 displacement05
                      6.5000042764e+00 displacement06
                      6.5324356433e+00 displacement07
                      6.5651922617e+00 displacement08
                      6.5982790490e+00 displacement09
                      6.6317010224e+00 displacement10
                      6.6654633012e+00 displacement11
                      6.6995711097e+00 displacement12
                      6.7340297793e+00 displacement13
                      6.7688447519e+00 displacement14
                      6.8040215826e+00 displacement15
                      6.8395659423e+00 displacement16
                      6.8754836214e+00 displacement17
                      6.9117805321e+00 displacement18
                      6.9484627126e+00 displacement19
                      6.9855363296e+00 displacement20



------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation   16
---------------------
Parameters for evaluation 16:
                      2.9821909157e+07 E0
                     -5.2921595180e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.16 results.out.16

Active response data for evaluation 16:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3362469533e+00 displacement01
                      6.3670609174e+00 displacement02
                      6.3981760505e+00 displacement03
                      6.4295967896e+00 displacement04
                      6.4613276593e+00 displacement05
                      6.4933732740e+00 displacement06
                      6.5257383401e+00 displacement07
                      6.5584276581e+00 displacement08
                      6.5914461256e+00 displacement09
                      6.6247987388e+00 displacement10
                      6.6584905961e+00 displacement11
                      6.6925268997e+00 displacement12
                      6.7269129588e+00 displacement13
                      6.7616541925e+00 displacement14
                      6.7967561322e+00 displacement15
                      6.8322244249e+00 displacement16
                      6.8680648360e+00 displacement17
                      6.9042832525e+00 displacement18
                      6.9408856863e+00 displacement19
                      6.9778782776e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation   17
---------------------
Parameters for evaluation 17:
                      2.9792117040e+07 E0
                     -5.2974516776e+03 Es
                      4.0000000000e+02 Y

blocking fork: python cantilever.py params.in.17 results.out.17

Active response data for evaluation 17:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3425383155e+00 displacement01
                      6.3734446762e+00 displacement02
                      6.4046537172e+00 displacement03
                      6.4361699068e+00 displacement04
                      6.4679978016e+00 displacement05
                      6.5001420489e+00 displacement06
                      6.5326073888e+00 displacement07
                      6.5653986567e+00 displacement08
                      6.5985207855e+00 displacement09
                      6.6319788079e+00 displacement10
                      6.6657778597e+00 displacement11
                      6.6999231814e+00 displacement12
                      6.7344201219e+00 displacement13
                      6.7692741405e+00 displacement14
                      6.8044908102e+00 displacement15
                      6.8400758206e+00 displacement16
                      6.8760349810e+00 displacement17
                      6.9123742234e+00 displacement18
                      6.9490996060e+00 displacement19
                      6.9862173162e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.1192907157e-07  4.2427899874e-06 ] displacement01 gradient
 [ -2.1399639604e-07 -1.5783965006e-06 ] displacement02 gradient
 [ -2.1609411820e-07 -7.5140269506e-06 ] displacement03 gradient
 [ -2.1822283694e-07 -1.3566642025e-05 ] displacement04 gradient
 [ -2.2038316596e-07 -1.9738849545e-05 ] displacement05 gradient
 [ -2.2257573424e-07 -2.6033326581e-05 ] displacement06 gradient
 [ -2.2480118648e-07 -3.2452821620e-05 ] displacement07 gradient
 [ -2.2706018355e-07 -3.9000156807e-05 ] displacement08 gradient
 [ -2.2935340304e-07 -4.5678230274e-05 ] displacement09 gradient
 [ -2.3168153972e-07 -5.2490018549e-05 ] displacement10 gradient
 [ -2.3404530609e-07 -5.9438579054e-05 ] displacement11 gradient
 [ -2.3644543290e-07 -6.6527052703e-05 ] displacement12 gradient
 [ -2.3888266974e-07 -7.3758666582e-05 ] displacement13 gradient
 [ -2.4135778562e-07 -8.1136736743e-05 ] displacement14 gradient
 [ -2.4387156957e-07 -8.8664671096e-05 ] displacement15 gradient
 [ -2.4642483128e-07 -9.6345972409e-05 ] displacement16 gradient
 [ -2.4901840173e-07 -1.0418424143e-04 ] displacement17 gradient
 [ -2.5165313388e-07 -1.1218318010e-04 ] displacement18 gradient
 [ -2.5432990339e-07 -1.2034659494e-04 ] displacement19 gradient
 [ -2.5704960932e-07 -1.2867840053e-04 ] displacement20 gradient


    4    7  19.8       7.7e-09  7.9e-09  2.e-06    G    0.      0.0003  7.9e-09

***** X- AND RELATIVE FUNCTION CONVERGENCE *****

FUNCTION     19.7991        RELDX        1.96e-06
FUNC. EVALS      7          GRAD. EVALS      5
PRELDF       7.93e-09       NPRELDF      7.93e-09

    I      FINAL X(I)        D(I)          G(I)

    1       2.97921e+07      2.57e-06    6.75e-12
    2      -5292.16          0.00129     3.41e-09

------------------------------------------
Begin Dakota derivative estimation routine
------------------------------------------

>>>>> map at X performed previously and results retrieved

>>>>> Dakota finite difference gradient evaluation for x[1] + h:

---------------------
Begin Evaluation   18
---------------------
Parameters for evaluation 18:
                      2.9821909157e+07 E0
                     -5.2921595180e+03 Es
                      4.0000000000e+02 Y

Duplication detected: analysis_drivers not invoked.

Active response data retrieved from database:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3362469533e+00 displacement01
                      6.3670609174e+00 displacement02
                      6.3981760505e+00 displacement03
                      6.4295967896e+00 displacement04
                      6.4613276593e+00 displacement05
                      6.4933732740e+00 displacement06
                      6.5257383401e+00 displacement07
                      6.5584276581e+00 displacement08
                      6.5914461256e+00 displacement09
                      6.6247987388e+00 displacement10
                      6.6584905961e+00 displacement11
                      6.6925268997e+00 displacement12
                      6.7269129588e+00 displacement13
                      6.7616541925e+00 displacement14
                      6.7967561322e+00 displacement15
                      6.8322244249e+00 displacement16
                      6.8680648360e+00 displacement17
                      6.9042832525e+00 displacement18
                      6.9408856863e+00 displacement19
                      6.9778782776e+00 displacement20


>>>>> Dakota finite difference gradient evaluation for x[2] + h:

---------------------
Begin Evaluation   19
---------------------
Parameters for evaluation 19:
                      2.9792117040e+07 E0
                     -5.2974516776e+03 Es
                      4.0000000000e+02 Y

Duplication detected: analysis_drivers not invoked.

Active response data retrieved from database:
Active set vector = { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
                      6.3425383155e+00 displacement01
                      6.3734446762e+00 displacement02
                      6.4046537172e+00 displacement03
                      6.4361699068e+00 displacement04
                      6.4679978016e+00 displacement05
                      6.5001420489e+00 displacement06
                      6.5326073888e+00 displacement07
                      6.5653986567e+00 displacement08
                      6.5985207855e+00 displacement09
                      6.6319788079e+00 displacement10
                      6.6657778597e+00 displacement11
                      6.6999231814e+00 displacement12
                      6.7344201219e+00 displacement13
                      6.7692741405e+00 displacement14
                      6.8044908102e+00 displacement15
                      6.8400758206e+00 displacement16
                      6.8760349810e+00 displacement17
                      6.9123742234e+00 displacement18
                      6.9490996060e+00 displacement19
                      6.9862173162e+00 displacement20


>>>>> Total response returned to iterator:

Active set vector = { 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 } Deriv vars vector = { 1 2 }
 [ -2.1192907157e-07  4.2427899874e-06 ] displacement01 gradient
 [ -2.1399639604e-07 -1.5783965006e-06 ] displacement02 gradient
 [ -2.1609411820e-07 -7.5140269506e-06 ] displacement03 gradient
 [ -2.1822283694e-07 -1.3566642025e-05 ] displacement04 gradient
 [ -2.2038316596e-07 -1.9738849545e-05 ] displacement05 gradient
 [ -2.2257573424e-07 -2.6033326581e-05 ] displacement06 gradient
 [ -2.2480118648e-07 -3.2452821620e-05 ] displacement07 gradient
 [ -2.2706018355e-07 -3.9000156807e-05 ] displacement08 gradient
 [ -2.2935340304e-07 -4.5678230274e-05 ] displacement09 gradient
 [ -2.3168153972e-07 -5.2490018549e-05 ] displacement10 gradient
 [ -2.3404530609e-07 -5.9438579054e-05 ] displacement11 gradient
 [ -2.3644543290e-07 -6.6527052703e-05 ] displacement12 gradient
 [ -2.3888266974e-07 -7.3758666582e-05 ] displacement13 gradient
 [ -2.4135778562e-07 -8.1136736743e-05 ] displacement14 gradient
 [ -2.4387156957e-07 -8.8664671096e-05 ] displacement15 gradient
 [ -2.4642483128e-07 -9.6345972409e-05 ] displacement16 gradient
 [ -2.4901840173e-07 -1.0418424143e-04 ] displacement17 gradient
 [ -2.5165313388e-07 -1.1218318010e-04 ] displacement18 gradient
 [ -2.5432990339e-07 -1.2034659494e-04 ] displacement19 gradient
 [ -2.5704960932e-07 -1.2867840053e-04 ] displacement20 gradient


<<<<< Function evaluation summary: 19 total (17 new, 2 duplicate)
<<<<< Best parameters          =
                      2.9792117040e+07 E0
                     -5.2921595180e+03 Es
                      4.0000000000e+02 Y
Original (as-posed) response:
<<<<< Best model responses =
                      6.3425607690e+00
                      6.3734363231e+00
                      6.4046139518e+00
                      6.4360981099e+00
                      6.4678933404e+00
                      6.5000042764e+00
                      6.5324356433e+00
                      6.5651922617e+00
                      6.5982790490e+00
                      6.6317010224e+00
                      6.6654633012e+00
                      6.6995711097e+00
                      6.7340297793e+00
                      6.7688447519e+00
                      6.8040215826e+00
                      6.8395659423e+00
                      6.8754836214e+00
                      6.9117805321e+00
                      6.9484627126e+00
                      6.9855363296e+00
Variance-weighted original (as-posed) residuals:
<<<<< Best residual terms =
                     -5.1358930981e-01
                      1.1655669312e+00
                     -1.4410490819e+00
                      3.2170469941e-01
                      7.4737180420e-01
                     -8.4230693645e-01
                     -7.9630926676e-01
                      7.1858361691e-01
                      8.5510389919e-02
                      2.3634122240e+00
                     -1.0094056875e+00
                     -8.3102260330e-01
                     -7.7170790731e-01
                      2.2239722191e+00
                      5.5831372571e-01
                      2.4406412323e-01
                     -1.3688788649e-01
                      2.3035211367e-03
                     -1.0064755742e+00
                      1.8853430960e+00
                      1.7454352679e-01
                      6.3903015414e-01
                     -1.9898278796e-01
                     -5.4740373373e-01
                     -1.3002961305e+00
                      4.9920930903e-01
                     -6.3336797784e-01
                      1.8717339446e+00
                      2.5057972661e-01
                     -9.7848431735e-01
                      4.9159354165e-01
                     -2.3015540220e-01
                     -9.2650113821e-01
                     -9.1079332062e-01
                     -7.1422638286e-01
                      2.8621321548e-01
                      5.4330742338e-02
                      5.1705841409e-01
                     -6.3188631611e-01
                     -2.1653354694e+00
<<<<< Best residual norm =  6.2927179292e+00; 0.5 * norm^2 =  1.9799149468e+01
<<<<< Best residual terms =
                     -5.1358930981e-01
                      1.1655669312e+00
                     -1.4410490819e+00
                      3.2170469941e-01
                      7.4737180420e-01
                     -8.4230693645e-01
                     -7.9630926676e-01
                      7.1858361691e-01
                      8.5510389919e-02
                      2.3634122240e+00
                     -1.0094056875e+00
                     -8.3102260330e-01
                     -7.7170790731e-01
                      2.2239722191e+00
                      5.5831372571e-01
                      2.4406412323e-01
                     -1.3688788649e-01
                      2.3035211367e-03
                     -1.0064755742e+00
                      1.8853430960e+00
                      1.7454352679e-01
                      6.3903015414e-01
                     -1.9898278796e-01
                     -5.4740373373e-01
                     -1.3002961305e+00
                      4.9920930903e-01
                     -6.3336797784e-01
                      1.8717339446e+00
                      2.5057972661e-01
                     -9.7848431735e-01
                      4.9159354165e-01
                     -2.3015540220e-01
                     -9.2650113821e-01
                     -9.1079332062e-01
                     -7.1422638286e-01
                      2.8621321548e-01
                      5.4330742338e-02
                      5.1705841409e-01
                     -6.3188631611e-01
                     -2.1653354694e+00
<<<<< Best residual norm =  6.2927179292e+00; 0.5 * norm^2 =  1.9799149468e+01
<<<<< Best data not found in evaluation cache

Warning: Confidence intervals may be inaccurate when num_experiments > 1
Confidence Intervals on Calibrated Parameters:
            E0: [ 2.7672662116e+07, 3.1911571964e+07 ]
            Es: [ -1.2289489271e+04, 1.7051702352e+03 ]

<<<<< Iterator nl2sol completed.
<<<<< Environment execution completed.
DAKOTA execution time in seconds:
  Total CPU        =   0.057887 [parent =   0.057879, child =      8e-06]
  Total wall clock =    3.60087
